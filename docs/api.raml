#%RAML 1.0
title: "ZeroDrive REST API"
description: "REST API for the INFO 3103 term project. ZeroDrive is a cloud storage\
  \ webapp, inspired by Microsoft OneDrive."
version: "1.0.0"
mediaType:
- "application/json"
types:
  Error:
    type: "object"
    description: "A generic error message returned from most endpoints if a request\
      \ fails."
    properties:
      error:
        type: "string"
        description: "Detailed error message"
/user:
  displayName: "User"
  description: "Endpoint for creating, accessing, and updating user accounts."
  post:
    displayName: "Create new account"
    description: "Creates a new user account from the given username and password."
    body:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    responses:
      200:
        description: "Account successfully created."
      400:
        description: "Failed to create account. Body contains error message."
        body:
          type: "object"
          properties:
            error:
              type: "string"
              description: "A description of the error that occurred"
          example:
            value: "{\"error\": \"Missing request body field: password\"}"
            strict: false
  get:
    displayName: "Retrieve data about the current user"
    description: "Returns information about the current logged in user."
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "Success, the body contains user information."
        body:
          type: "object"
          properties:
            email:
              type: "string"
            is_unb_account:
              type: "boolean"
              description: "True if this user signed up using their UNB account"
            root_folder_id:
              type: "integer"
              description: "The ID of the root folder for this user"
            used_storage_space:
              type: "integer"
              description: "Used storage space in bytes."
            max_storage_space:
              type: "integer"
              description: "Maximum storage space, in bytes, for this user."
      401:
        description: "The session cookie is not set or invalid."
        body:
          type: "Error"
  delete:
    displayName: "Delete the current user account"
    description: "Deletes the current logged user's account. This also deletes all\
      \ of the files the user has uploaded."
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "The account has been successfully deleted. The session cookie\
          \ has also been cleared."
      401:
        description: "Account deletion fails if the session does not exist or is invalid."
        body:
          type: "Error"
/login:
  displayName: "Endpoint for logging in and out"
  post:
    displayName: "Logs in a user"
    body:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    responses:
      200:
        description: "Login was successful"
        headers:
          Set-Cookie:
            type: "string"
            description: "The encrypted session cookie to by passed to subsequent\
              \ requests"
      400:
        description: "Login was not successful"
        body:
          type: "Error"
  delete:
    displayName: "Logs out the current user"
    description: "Fails if the user is not logged in."
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "The logout was successful and the session was cleared"
      400:
        description: "The logout request failed. The body contains the error message."
        body:
          type: "Error"
          example:
            value: "{\"error\": \"Logout failed because user is not logged in\"}"
            strict: false
/folder:
  post:
    displayName: "Create a new folder"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    body:
      type: "object"
      properties:
        name:
          type: "string"
        parent_folder_id:
          type: "integer"
    responses:
      200:
        description: "Folder successfully created. The response body contains the\
          \ created folder's ID."
        body:
          type: "object"
          properties:
            new_folder_id:
              type: "integer"
              description: "The ID of the new folder"
      400:
        description: "No session cookie was included in the request."
      401:
        description: "Current user doesn't have access to the requested parent folder."
      404:
        description: "The given parent folder ID does not exist."
/folder/{id}:
  uriParameters:
    id:
      type: "integer"
      description: "The unique ID of the folder."
  get:
    displayName: "Retrieve information about a folder"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        body:
          type: "object"
          description: "JSON object containing information about requested folder."
          properties:
            name:
              type: "string"
              description: "Name of the retrieved folder. This is an empty string\
                \ if the folder is a root folder."
            hierarchy:
              type: "array"
              description: "An order list of all the folders that make up this folder's\
                \ parent hierarchy. List is empty if this is the root folder."
              items:
                type: "object"
                properties:
                  name:
                    type: "integer"
                    description: "The name of the folder. Empty string if the folder\
                      \ is the root folder."
                  id:
                    type: "integer"
                    description: "The ID of the folder."
            contents:
              type: "array"
              items:
                type: "object"
                properties:
                  name:
                    type: "string"
                    description: "Name of the child object."
                  type:
                    type: "string"
                    description: "Either \"folder\" or \"file\"."
                  id:
                    type: "integer"
                    description: "The ID of the file or folder."
                  last_modified:
                    type: "string"
                  size:
                    type: "integer"
                    description: "If object is a file, the size in bytes of the file."
                    required: false
          example:
            value: "{\n    \"name\": \"SomeFolder\",\n    \"hierarchy\": [\n     \
              \   {\n            \"name\": \"\",\n            \"id\": 10\n       \
              \ }\n    ],\n    \"contents\": []\n}"
            strict: false
      401:
        description: "User does not have access to the requested folder."
      404:
        description: "Could not find the requested folder."
  put:
    displayName: "Rename a folder"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    body:
      type: "object"
      properties:
        new_name:
          type: "string"
    responses:
      200:
        description: "Folder renamed successfully"
      401:
        description: "User does not have permission to rename this folder"
      404:
        description: "Could not find the requested folder."
  delete:
    displayName: "Delete a folder"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "Folder deleted successfully."
      400:
        description: "The requested folder is the user's root folder, which cannot\
          \ be deleted."
      401:
        description: "User does not have access to the requested folder."
      404:
        description: "Could not find the requested folder."
/file:
  post:
    displayName: "Upload a file"
    description: "Fails if the user doesn't own the folder uploading to."
    queryParameters:
      folder:
        type: "integer"
        description: "The ID of the folder to upload this file to."
    headers:
      Content-Type:
        type: "string"
        example: "multipart/form-data"
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    body:
      multipart/form-data:
        type: "object"
        properties:
          file:
            type: "file"
            description: "The contents of the file to upload."
          parent_folder:
            type: "integer"
            description: "The ID of the folder to upload to"
    responses:
      200:
        description: "File uploaded successfully."
        body:
          type: "object"
          properties:
            new_file_id:
              type: "integer"
              description: "The ID of the uploaded file."
      400:
        description: "Request was invalid."
        body:
          type: "Error"
          examples:
            example:
              value: "{\"error\": \"Target folder was not specified\"}"
              strict: false
            example1:
              value: "{\"error\": \"File too large! Max file size is 500 MB.\"}"
              strict: false
            example2:
              value: "{\"error\": \"Not enough storage space! You only have 143MB\
                \ left.\"}"
              strict: false
      401:
        description: "Current user does not have access to upload to the requested\
          \ folder."
      404:
        description: "The given folder ID does not exist."
/file/{id}:
  uriParameters:
    id:
      type: "integer"
      description: "The unique ID of a file."
      example: 6015
  get:
    displayName: "Initiates a download for a file"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "File retrieved successfully."
      401:
        description: "User does not have access to the requested file."
      404:
        description: "No file exists with the given ID."
  put:
    displayName: "Rename a file"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    body:
      type: "object"
      properties:
        new_name:
          type: "string"
    responses:
      200:
        description: "File renamed successfully"
      401:
        description: "User does not have permission to rename this file."
      404:
        description: "Could not find the requested file."
  delete:
    displayName: "Delete a file"
    headers:
      Cookie:
        type: "string"
        description: "Session cookie returned on login"
    responses:
      200:
        description: "File deleted successfully."
      401:
        description: "User does not have access to the requested file."
      404:
        description: "Could not find the requested file."
